/* This file is automagically generated by clfutil 0.1.0 from T-ARRI_Tone.clf */
/*
    Source: https://github.com/priikone/aces-looks

           Name: ACESLooks LMT - ARRI Tone-curve Look
    Description: This LMT emulates the tonal appearance of the ARRI ALF-2 DRT when used with ACES 1.3. It does not change colorimetry.
       Revision: 1.3-1
          Input: ACES2065-1 AP0 [full dynamic range]
         Matrix: Convert ACES2065-1 (AP0) to ACEScg (AP1)
          Range: Clamp to max 65504
            Log: Convert linear to ACEScct log
          Range: Scale full ACEScct log range to 0-1 range
          LUT1D: Approximate ARRI ALF-2 tone curve with full ACEScct output
            Log: Convert ACEScct log to linear
         Matrix: Convert ACEScg (AP1) to ACES2065-1 (AP0)
          Range: Clamp to max 65504
         Output: ACES2065-1 AP0 [full dynamic range]
*/

typedef struct
{
  float3 x, y, z;
} float3x3;

__DEVICE__ float3x3 make_float3x3(float3 a, float3 b, float3 c)
{
  float3x3 d;
  d.x = a, d.y = b, d.z = c;
  return d;
}

__DEVICE__ float3 mult_f3_f33(float3 a, float3x3 m)
{
  return make_float3(m.x.x * a.x + m.x.y * a.y + m.x.z * a.z,
                     m.y.x * a.x + m.y.y * a.y + m.y.z * a.z,
                     m.z.x * a.x + m.z.y * a.y + m.z.z * a.z);
}

__DEVICE__ float3 lin2ACEScct(float3 rgb)
{
  rgb.x = rgb.x > 0.0078125f ? (_log2f(rgb.x) + 9.72f) / 17.52f : 10.5402377416545f * rgb.x + 0.0729055341958355f;
  rgb.y = rgb.y > 0.0078125f ? (_log2f(rgb.y) + 9.72f) / 17.52f : 10.5402377416545f * rgb.y + 0.0729055341958355f;
  rgb.z = rgb.z > 0.0078125f ? (_log2f(rgb.z) + 9.72f) / 17.52f : 10.5402377416545f * rgb.z + 0.0729055341958355f;
  return rgb;
}

__DEVICE__ float3 ACEScct2lin(float3 rgb)
{
  rgb.x = rgb.x > 0.155251141552511f ? _powf(2.0f, rgb.x * 17.52f - 9.72f) : (rgb.x - 0.0729055341958355f) / 10.5402377416545f;
  rgb.y = rgb.y > 0.155251141552511f ? _powf(2.0f, rgb.y * 17.52f - 9.72f) : (rgb.y - 0.0729055341958355f) / 10.5402377416545f;
  rgb.z = rgb.z > 0.155251141552511f ? _powf(2.0f, rgb.z * 17.52f - 9.72f) : (rgb.z - 0.0729055341958355f) / 10.5402377416545f;
  return rgb;
}

__DEVICE__ float3 range(float3 rgb, float min_in, float max_in, float min_out, float max_out, int clamp)
{
  float s = (max_out - min_out) / (max_in - min_in);

  rgb.x = rgb.x * s + min_out - min_in * s;
  rgb.y = rgb.y * s + min_out - min_in * s;
  rgb.z = rgb.z * s + min_out - min_in * s;

  if (clamp) {
    rgb.x = _fminf(max_out, _fmaxf(min_out, rgb.x));
    rgb.y = _fminf(max_out, _fmaxf(min_out, rgb.y));
    rgb.z = _fminf(max_out, _fmaxf(min_out, rgb.z));
  }

  return rgb;
}

DEFINE_LUT(LUT1D0, ../ACEScct_LUT/T-ARRI_Tone.cube)

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
  float3 rgb = make_float3(p_R, p_G, p_B);

  rgb = mult_f3_f33(rgb, make_float3x3(make_float3(1.45143931614566579f, -0.23651074689374021f, -0.21492856925192538f), make_float3(-0.07655377339602076f, 1.17622969983357284f, -0.09967592643755215f), make_float3(0.00831614842569772f, -0.00603244979102103f, 0.99771630136532330f)));
  rgb = range(rgb, 0.0f, 65504.0f, 0.0f, 65504.0f, 1);
  rgb = lin2ACEScct(rgb);
  rgb = APPLY_LUT(rgb.x, rgb.y, rgb.z, LUT1D0);
  rgb = ACEScct2lin(rgb);
  rgb = mult_f3_f33(rgb, make_float3x3(make_float3(0.69545224135745165f, 0.14067869647029416f, 0.16386906217225405f), make_float3(0.04479456337203777f, 0.85967111845642186f, 0.09553431817154040f), make_float3(-0.00552588255811354f, 0.00402521030597866f, 1.00150067225213490f)));
  rgb = range(rgb, 0.0f, 65504.0f, 0.0f, 65504.0f, 1);

  return rgb;
}
